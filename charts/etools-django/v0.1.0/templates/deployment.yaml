apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: {{ include "name" . }}
  labels:
    app: {{ include "name" . }}
    helm.sh/chart: {{ include "chart" . }}
    environment: {{ .Values.environment | default "production" | quote }}
    instance: {{ .Release.Name }}
    managed-by: {{ .Release.Service }}
spec:
  progressDeadlineSeconds: 600
  # replica count should be dependent on the name of the deployment, if web / worker / beater
  replicas: {{ .Values.replicaCount }}
  # make sure we don't run out of storage
  revisionHistoryLimit: 10
  # 
  selector:
    matchLabels:
      app: {{ include "name" . }}
      instance: {{ .Release.Name }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ include "name" . }}
        instance: {{ .Release.Name }}
    spec:
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
      {{- end}}
      {{- end }}
      containers:
      - name: {{ include "name" . }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        ports:
          - name: http
            containerPort: 80
            protocol: TCP
        env:
          - name: SECRET_KEY
            value: "notsosecret"
          {{- if .Values.configMaps }}
          envFrom:
          {{- range .Values.image.configMaps }}
          - configMapRef:
              name: {{ . }}
          {{- end}}
          {{- end }}
        # livenessProbe:
        #   httpGet:
        #     path: /
        #     port: http
        # readinessProbe:
        #   httpGet:
        #     path: /
        #     port: http
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities: {}
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 10 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 10 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 10 }}
    {{- end }}
